Quando o jogo acaba o state muda para ter a grid dos highscores

{
    'grid': 
    [
        [0, 30], [1, 30], [2, 30], [3, 30], [4, 30], [5, 30], 
        [6, 30], [7, 30], [8, 30], [9, 30], [0, 0], [0, 1], [0, 2], 
        [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], 
        [0, 10], [0, 11], [0, 12], [0, 13], [0, 14], [0, 15], 
        [0, 16], [0, 17], [0, 18], [0, 19], [0, 20], [0, 21], 
        [0, 22], [0, 23], [0, 24], [0, 25], [0, 26], [0, 27], 
        [0, 28], [0, 29], [9, 0], [9, 1], [9, 2], [9, 3], [9, 4], 
        [9, 5], [9, 6], [9, 7], [9, 8], [9, 9], [9, 10], [9, 11], 
        [9, 12], [9, 13], [9, 14], [9, 15], [9, 16], [9, 17], 
        [9, 18], [9, 19], [9, 20], [9, 21], [9, 22], [9, 23], 
        [9, 24], [9, 25], [9, 26], [9, 27], [9, 28], [9, 29]
    ], 

    'piece': None, 
    'next_pieces': [[[1, 2], [2, 2], [1, 3], [2, 3]], 
        [[2, 1], [2, 2], [2, 3], [3, 3]], 
        [[2, 1], [2, 2], [3, 2], [3, 3]]], 


    'game_speed': 10, 'score': 0, 
    'highscores': [['goncalo', 2], ['goncalo', 0], 
            ['goncalo', 0], ['goncalo', 0], ['goncalo', 0], 
            ['goncalo', 0], ['goncalo', 0], ['goncalo', 0], 
            ['goncalo', 0]], 
    'player': 'goncalo'
}

Enquanto tivermos game significa que está a jogar

Temos de ver a peça que temos de manipular e perceber qual é.
Game tem as posições ocupadas.
Temos de pegar na peça, identificar o tipo de peça (uma classe para 
cada tipo de peça que extenda shape) e ver qual é a rotação e posição
mais vantajosa.

No início temos de dar prioridade às rotações que ocupem mais 
quadrados na primeira linha.

Devemos tentar não deixar que as peças ganhem muita altura e 
não ter buracos, ou se tiver devem estar alinhados verticalmente.

Nos vídeos que vimos eles não ligavam nada às próximas peças.

{
    'game': [
        [2, 29], [3, 29], [4, 29], [5, 29], [3, 27], 
        [4, 27], [3, 28], [4, 28], [4, 24], [5, 24], 
        [4, 25], [4, 26], [2, 23], [3, 23], [4, 23], 
        [5, 23], [4, 20], [4, 21], [4, 22], [5, 22], 
        [4, 17], [4, 18], [5, 18], [4, 19], [3, 15], 
        [4, 15], [3, 16], [4, 16], [4, 12], [4, 13], 
        [5, 13], [4, 14], [3, 10], [4, 10], [3, 11], 
        [4, 11], [3, 8], [4, 8], [3, 9], [4, 9], 
        [3, 6], [4, 6], [3, 7], [4, 7]
    ], 
    'piece': [[4, 2], [4, 3], [4, 4], [5, 4]], 
    'next_pieces': [
        [[2, 1], [1, 2], [2, 2], [1, 3]], 
        [[0, 1], [1, 1], [2, 1], [3, 1]], 
        [[1, 2], [2, 2], [1, 3], [2, 3]]
    ], 
    'game_speed': 10
}

{
    'game': [
        [2, 29], [3, 29], [4, 29], [5, 29], [3, 27], 
        [4, 27], [3, 28], [4, 28], [4, 24], [5, 24], 
        [4, 25], [4, 26], [2, 23], [3, 23], [4, 23], 
        [5, 23], [4, 20], [4, 21], [4, 22], [5, 22], 
        [4, 17], [4, 18], [5, 18], [4, 19], [3, 15], 
        [4, 15], [3, 16], [4, 16], [4, 12], [4, 13], 
        [5, 13], [4, 14], [3, 10], [4, 10], [3, 11], 
        [4, 11], [3, 8], [4, 8], [3, 9], [4, 9], 
        [3, 6], [4, 6], [3, 7], [4, 7]
    ], 
    'piece': [[4, 3], [4, 4], [4, 5], [5, 5]], 
    'next_pieces': [
        [[2, 1], [1, 2], [2, 2], [1, 3]], 
        [[0, 1], [1, 1], [2, 1], [3, 1]], 
        [[1, 2], [2, 2], [1, 3], [2, 3]]
    ], 
    'game_speed': 10
}


[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
-----




Melhor combinação ate agora foi :
     score = (aggregate_height * aggregate_height_weight + 
        holes * holes_weight + completed_lines * completed_lines_weight + bumpiness * bumpiness_weight)


e as heuristicas todas corretas neste ponto